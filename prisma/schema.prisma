generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model CounsellingData {
  id                    Int       @id @default(autoincrement())
  year                  Int?
  round                 Int?
  rank                  BigInt?
  quota                 String?
  state                 String?
  collegeName           String?   @map("college_name")
  course                String?
  category              String?
  subCategory           String?   @map("sub_category")
  gender                String?
  physicallyHandicapped String?   @map("physically_handicapped")
  marksObtained         Int?      @map("marks_obtained")
  maxMarks              Int?      @map("max_marks")
  status                String?
  dateOfAdmission       String?   @map("date_of_admission")
  studentName           String?   @map("student_name")
  dateOfBirth           String?   @map("date_of_birth")
  examNameRoll          String?   @map("exam_name_roll")
  pgTeacher             String?   @map("pg_teacher")
  stipendAmount         BigInt?   @map("stipend_amount")
  studentRegnNo         String?   @map("student_regn_no")
  registeredCouncil     String?   @map("registered_council")
  createdAt             DateTime? @default(now()) @map("created_at") @db.Timestamp(6)

  verificationRecords   VerificationRecord[]

  @@index([category], map: "idx_category")
  @@index([collegeName], map: "idx_college_name")
  @@index([course], map: "idx_course")
  @@index([quota], map: "idx_quota")
  @@index([rank], map: "idx_rank")
  @@index([year, round], map: "idx_year_round")
  @@map("counselling_data")
}

model ProcessedFile {
  id                Int                 @id @default(autoincrement())
  filename          String?             @unique
  fileType          String?             @map("file_type")
  processedDate     DateTime?           @default(now()) @map("processed_date") @db.Timestamp(6)
  recordsCount      Int?                @map("records_count")
  verificationStatus String?            @default("pending") @map("verification_status")
  verifiedAt        DateTime?           @map("verified_at") @db.Timestamp(6)
  verifiedBy        String?             @map("verified_by")
  sampleSize        Int?                @map("sample_size")
  
  verificationRecords VerificationRecord[]

  @@map("processed_files")
}

model VerificationRecord {
  id                  Int             @id @default(autoincrement())
  counsellingDataId   Int             @map("counselling_data_id")
  processedFileId     Int             @map("processed_file_id")
  pageNumber          Int             @map("page_number")
  verificationStatus  String          @default("pending") @map("verification_status")
  verifiedAt          DateTime?       @map("verified_at") @db.Timestamp(6)
  verifiedBy          String?         @map("verified_by")
  notes               String?
  createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  
  counsellingData     CounsellingData @relation(fields: [counsellingDataId], references: [id], onDelete: Cascade)
  processedFile       ProcessedFile   @relation(fields: [processedFileId], references: [id], onDelete: Cascade)

  @@index([counsellingDataId])
  @@index([processedFileId])
  @@index([verificationStatus])
  @@map("verification_records")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("users")
}
